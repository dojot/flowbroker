version: '2.1'
services:

  mongodb:
    image: "mongo:3.2"
    restart: always
    user: "mongodb"
    logging:
      driver: json-file
      options:
        max-size: 100m

  # orion replacement component
  data-broker:
    image: dojot/data-broker
    restart: always
    depends_on:
      - kafka
      - data-broker-redis
    logging:
      driver: json-file
      options:
        max-size: 100m

  data-broker-redis:
    image: "redis:5.0.5"
    restart: always
    logging:
      driver: json-file
      options:
        max-size: 100m

  flowbroker-context-manager:
    image: flowbroker-context-manager
    restart: always
    environment:
      ZOOKEEPER_HOST: zookeeper
      ZOOKEEPER_PORT: 2181
      ZEROMQ_PORT: 5556
      HOLD_LOCK_TIMEOUT: 10000
      WAIT_LOCK_TIMEOUT: 30000
    depends_on:
      - zookeeper
    networks:
      - default
      - flowbroker

  flowbroker-redis:
    image: "redis:5.0.5-alpine3.10"
    restart: always
    logging:
      driver: json-file
      options:
        max-size: 100m

  flowbroker:
    image: flowbroker
    restart: always
    depends_on:
      - rabbitmq
      - kafka
      - mongodb
      - data-broker
      - auth
      - flowbroker-context-manager
      - flowbroker-redis
      - device-manager
    environment:
      DOJOT_SERVICE_MANAGEMENT: "internal"
      DEPLOY_ENGINE: docker
      FLOWBROKER_NETWORK: ${FLOWBROKER_NETWORK}
    networks:
      - default
      - flowbroker
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:Z

  tester:
    image: tests-flowbroker
    depends_on:
      - flowbroker

  rabbitmq:
    image: "rabbitmq:3.7.17"
    restart: always
    logging:
      driver: json-file
      options:
        max-size: 100m
    ports:
      - "5672:5672"
      - "4369:4369"
      - "5671:5671"
      - "25672:25672"

  zookeeper:
    image: "zookeeper:3.4"
    logging:
      driver: json-file
      options:
        max-size: 100m

  kafka:
    image: "ches/kafka:0.10.1.1"
    depends_on:
      - zookeeper
    environment:
      ZOOKEEPER_IP: zookeeper
      KAFKA_NUM_PARTITIONS: 10
    logging:
      driver: json-file
      options:
        max-size: 100m

  auth-redis:
    image: "redis:5.0.5"
    restart: always
    logging:
      driver: json-file
      options:
        max-size: 100m

  auth:
    image: dojot/auth:latest
    restart: always
    depends_on:
      - auth-redis
      - postgres
      - apigw
      - postgres-users
    environment:
      AUTH_DB_HOST: "postgres"
      AUTH_DB_USER: "kong"
      AUTH_KONG_URL: "http://apigw:8001"
      AUTH_CACHE_HOST: "auth-redis"
      # This is used to select the type of cache to be used. Allowed values are "redis" or "nocache"
      AUTH_CACHE_NAME: "redis"
    logging:
      driver: json-file
      options:
        max-size: 100m

  postgres:
    image: postgres:9.4-alpine
    restart: always
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    logging:
      driver: json-file
      options:
        max-size: 100m

  device-manager-redis:
    image: "redis:5.0.5-alpine3.10"
    restart: always
    logging:
      driver: json-file
      options:
        max-size: 100m

  device-manager:
    image: dojot/device-manager
    restart: always
    environment:
      # TODO: Fill these env variables with suitable values
      - DEV_MNGR_CRYPTO_PASS="kamehameHA"
      - DEV_MNGR_CRYPTO_IV=1234567890123456
      - DEV_MNGR_CRYPTO_SALT="shuriken"
    depends_on:
      - postgres
      - kafka
      - data-broker
      - device-manager-redis
    logging:
      driver: json-file
      options:
        max-size: 100m

  postgres-users:
    image: postgres:9.4-alpine
    restart: on-failure
    command: >
      bash -c "createuser kong -d -h postgres -U postgres && createdb kong -U kong -h postgres"
    depends_on:
      postgres:
        condition: service_healthy
    logging:
      driver: json-file
      options:
        max-size: 100m

  kong-migration:
    image: dojot/kong:latest
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      - KONG_DATABASE=postgres
      - KONG_PG_HOST=postgres
    command: kong migrations up
    restart: on-failure

  apigw:
    image: dojot/kong:v0.2.1
    restart: always
    depends_on:
      postgres:
        condition: service_healthy
      kong-migration:
        condition: service_started
    ports:
      - "8000:8000"
    environment:
      KONG_DATABASE: "postgres"
      KONG_PG_HOST: "postgres"
    volumes:
      - ./apigw/plugins/pep-kong:/plugins/pep-kong:Z
      - ./apigw/plugins/mutualauthentication:/plugins/mutualauthentication:Z
    logging:
      driver: json-file
      options:
        max-size: 100m
networks:
  flowbroker:
    name: ${FLOWBROKER_NETWORK}
